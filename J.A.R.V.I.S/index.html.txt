<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>JARVIS HUD + Arc Reactor</title>
  <style>
    body, html { margin:0; padding:0; overflow:hidden; background:#000; }
    canvas { display:block; width:100vw; height:100vh; }
  </style>
</head>
<body>
  <canvas id="hud"></canvas>
  <script>
    const canvas = document.getElementById('hud');
    const ctx = canvas.getContext('2d');

    let energyLevel = 75;          // in %
    let rotationSpeed = 0.5;       // rev/sec
    let powerConsumption = 500;    // kW
    let repulsorPulse = 0;         // for pulsing effect

    function resize() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    window.addEventListener('resize', resize);
    resize();

    function drawGrid() {
      const step = 50;
      ctx.strokeStyle = 'rgba(0,255,200,0.1)';
      ctx.lineWidth = 0.5;
      for (let x = 0; x < canvas.width; x += step) {
        for (let y = 0; y < canvas.height; y += step) {
          ctx.strokeRect(x, y, step, step);
        }
      }
    }

    function drawArcReactor(now) {
      const cx = canvas.width / 2;
      const cy = canvas.height / 2;
      const radius = Math.min(canvas.width, canvas.height) * 0.15;
      const angle = (now / 1000) * rotationSpeed * 2 * Math.PI;

      // Outer ring
      ctx.save();
      ctx.translate(cx, cy);
      ctx.rotate(angle);
      ctx.strokeStyle = 'rgba(0,255,200,0.8)';
      ctx.lineWidth = 4;
      ctx.beginPath();
      ctx.arc(0, 0, radius + 10, 0, 2 * Math.PI);
      ctx.stroke();
      ctx.restore();

      // Inner stator segments
      const segments = 12;
      for (let i = 0; i < segments; i++) {
        const a = (i / segments) * 2 * Math.PI + angle;
        const x1 = cx + Math.cos(a) * (radius - 5);
        const y1 = cy + Math.sin(a) * (radius - 5);
        const x2 = cx + Math.cos(a) * (radius + 5);
        const y2 = cy + Math.sin(a) * (radius + 5);
        ctx.strokeStyle = 'rgba(0,255,200,0.9)';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
      }

      // Core glow
      const glow = radius * 0.5 + Math.sin(now / 300) * 5;
      const grad = ctx.createRadialGradient(cx, cy, 0, cx, cy, glow);
      grad.addColorStop(0, 'rgba(0,255,200,0.8)');
      grad.addColorStop(1, 'rgba(0,255,200,0)');
      ctx.fillStyle = grad;
      ctx.beginPath();
      ctx.arc(cx, cy, glow, 0, 2 * Math.PI);
      ctx.fill();
    }

    function drawRepulsors(now) {
      const positions = [
        [50, 50],
        [canvas.width - 50, 50],
        [50, canvas.height - 50],
        [canvas.width - 50, canvas.height - 50],
      ];
      repulsorPulse = (Math.sin(now / 200) + 1) / 2; // 0â€“1

      positions.forEach(([x, y]) => {
        const r = 20 + repulsorPulse * 10;
        const alpha = 0.4 + repulsorPulse * 0.6;
        ctx.fillStyle = `rgba(0,255,200,${alpha})`;
        ctx.beginPath();
        ctx.arc(x, y, r, 0, 2 * Math.PI);
        ctx.fill();
      });
    }

    function drawText(now) {
      ctx.fillStyle = 'rgba(0,255,200,1)';
      ctx.font = '16px monospace';

      // Date & Time
      ctx.fillText(`DATE: ${new Date().toLocaleDateString('en-GB')}`, 20, 30);
      ctx.fillText(`TIME: ${new Date().toLocaleTimeString('en-US',{hour12:false})}`, 20, 60);

      // Energy stats
      ctx.fillText('ENERGY LEVEL : ' + energyLevel + '%', 20, 100);
      ctx.fillText('ROTATION      : ' + rotationSpeed + ' rev/sec', 20, 125);
      ctx.fillText('POWER CONSUMP.: ' + powerConsumption + ' kW', 20, 150);

      // Notifications & Email
      ctx.fillText('NOTIFICATIONS:', 20, 200);
      ctx.fillText('- Arc reactor nominal', 20, 225);
      ctx.fillText('- Repulsors charged', 20, 250);
      ctx.fillText('EMAIL: tony@starkindustries.com', 20, canvas.height - 30);

      // Version
      ctx.fillText('-- JARVIS HUD v1.1', 20, canvas.height - 10);
    }

    function loop(ts) {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      drawGrid();
      drawArcReactor(ts);
      drawRepulsors(ts);
      drawText(ts);
      requestAnimationFrame(loop);
    }
    requestAnimationFrame(loop);
  </script>
</body>
</html>
