<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Interactive JARVIS HUD</title>
  <style>
    body, html { margin:0; padding:0; overflow:hidden; background:#000; }
    canvas { display:block; width:100vw; height:100vh; touch-action: none; }
  </style>
</head>
<body>
  <canvas id="hud"></canvas>
  <script>
    const canvas = document.getElementById('hud');
    const ctx = canvas.getContext('2d');

    // --- State & config ---
    let energyLevel = 75;          // %
    let rotationSpeed = 0.5;       // rev/sec
    let powerConsumption = 500;    // kW
    let showArm = false;           // hologram toggle
    const armImg = new Image();
    armImg.src = 'ironman_arm.png'; // put your arm image here
    let armLoaded = false;
    armImg.onload = () => armLoaded = true;

    function resize() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    window.addEventListener('resize', resize);
    resize();

    // Toggle on click or touch
    function toggleArm() { showArm = !showArm; }
    canvas.addEventListener('click', toggleArm);
    canvas.addEventListener('touchstart', e => {
      e.preventDefault();
      toggleArm();
    }, {passive:false});

    // --- Drawing helpers ---
    function drawGrid() {
      const step = 50;
      ctx.strokeStyle = 'rgba(0,255,200,0.1)';
      ctx.lineWidth = 0.5;
      for (let x = 0; x < canvas.width; x += step) {
        for (let y = 0; y < canvas.height; y += step) {
          ctx.strokeRect(x, y, step, step);
        }
      }
    }

    function drawArcReactor(ts) {
      const cx = canvas.width/2, cy = canvas.height/2;
      const radius = Math.min(canvas.width, canvas.height)*0.15;
      const angle = (ts/1000)*rotationSpeed*2*Math.PI;

      // Outer rotating ring
      ctx.save();
      ctx.translate(cx, cy);
      ctx.rotate(angle);
      ctx.strokeStyle = 'rgba(0,255,200,0.8)';
      ctx.lineWidth = 4;
      ctx.beginPath();
      ctx.arc(0, 0, radius+10, 0, 2*Math.PI);
      ctx.stroke();
      ctx.restore();

      // Inner segments
      const seg = 12;
      for (let i=0; i<seg; i++){
        const a = (i/seg)*2*Math.PI + angle;
        const x1 = cx+Math.cos(a)*(radius-5);
        const y1 = cy+Math.sin(a)*(radius-5);
        const x2 = cx+Math.cos(a)*(radius+5);
        const y2 = cy+Math.sin(a)*(radius+5);
        ctx.strokeStyle = 'rgba(0,255,200,0.9)';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.moveTo(x1,y1);
        ctx.lineTo(x2,y2);
        ctx.stroke();
      }

      // Core glow
      const glow = radius*0.5 + Math.sin(ts/300)*5;
      const grad = ctx.createRadialGradient(cx, cy, 0, cx, cy, glow);
      grad.addColorStop(0, 'rgba(0,255,200,0.8)');
      grad.addColorStop(1, 'rgba(0,255,200,0)');
      ctx.fillStyle = grad;
      ctx.beginPath();
      ctx.arc(cx, cy, glow, 0, 2*Math.PI);
      ctx.fill();
    }

    function drawRepulsors(ts) {
      const pts = [
        [50, 50],
        [canvas.width - 50, 50],
        [50, canvas.height - 50],
        [canvas.width - 50, canvas.height - 50],
      ];
      const pulse = (Math.sin(ts/200)+1)/2;
      pts.forEach(([x,y])=>{
        const r = 20 + pulse*10;
        const a = 0.4 + pulse*0.6;
        ctx.fillStyle = `rgba(0,255,200,${a})`;
        ctx.beginPath();
        ctx.arc(x, y, r, 0, 2*Math.PI);
        ctx.fill();
      });
    }

    function drawHoloArm(ts) {
      if (!showArm || !armLoaded) return;
      const cx = canvas.width/2, cy = canvas.height/2;
      const w = armImg.width * 0.5;
      const h = armImg.height * 0.5;
      const angle = (ts/2000) % (2*Math.PI);

      ctx.save();
      ctx.translate(cx, cy);
      ctx.rotate(Math.sin(angle)*0.2);            // gentle oscillation
      ctx.globalAlpha = 0.5;                      // translucent
      ctx.drawImage(armImg, -w/2, -h/2, w, h);
      ctx.globalAlpha = 1;
      ctx.restore();
    }

    function drawText() {
      const now = new Date();
      ctx.fillStyle = 'rgba(0,255,200,1)';
      ctx.font = '16px monospace';

      ctx.fillText(`DATE: ${now.toLocaleDateString('en-GB')}`, 20, 30);
      ctx.fillText(`TIME: ${now.toLocaleTimeString('en-US',{hour12:false})}`, 20, 60);

      ctx.fillText('ENERGY LEVEL : ' + energyLevel + '%', 20, 100);
      ctx.fillText('ROTATION      : ' + rotationSpeed + ' rev/sec', 20, 125);
      ctx.fillText('POWER CONSUMP.: ' + powerConsumption + ' kW', 20, 150);

      ctx.fillText('NOTIFICATIONS:', 20, 200);
      ctx.fillText('- Arc reactor nominal', 20, 225);
      ctx.fillText('- Repulsors charged', 20, 250);

      ctx.fillText('EMAIL: tony@starkindustries.com', 20, canvas.height-30);
      ctx.fillText('-- JARVIS HUD v1.2', 20, canvas.height-10);
    }

    // --- Main loop ---
    function loop(ts) {
      ctx.clearRect(0,0,canvas.width,canvas.height);
      drawGrid();
      drawArcReactor(ts);
      drawRepulsors(ts);
      drawHoloArm(ts);
      drawText();
      requestAnimationFrame(loop);
    }
    requestAnimationFrame(loop);
  </script>
</body>
</html>

